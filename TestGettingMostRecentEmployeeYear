package edu.westga.cs1301.business.test.employee;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;

import edu.westga.cs1301.business.model.Company;
import edu.westga.cs1301.business.model.Employee;

/**
 * test getMostRecentYear method and makes sure it returns
 * the correct year number, and that the list input can not be empty
 * 
 * @author jb00645
 *
 */
class TestGettingMostRecentEmployeeYear {

	@Test
	public void testIfListHasMutipleEmployeesHighestFirst() {
		//Arrange && Act
		Company google = new Company("google");
		Employee jacob = new Employee("jacob", "job title", 1999, 8.0, 4);
		Employee mad = new Employee("mad", "job title", 1991, 10.0, 4);
		Employee jax = new Employee("jax", "job title", 1992, 12.0, 4);
		Employee oli = new Employee("oli", "job title", 1993, 14.0, 4);
		Employee mac = new Employee("mac", "job title", 1994, 16.0, 4);
		google.addEmployee(jacob);
		google.addEmployee(mad);
		google.addEmployee(jax);
		google.addEmployee(oli);
		google.addEmployee(mac);
		//Assert
		int actual = google.getsMostRecentEmployeeYear();
		assertEquals(1999, actual);
	}
	
	@Test
	public void testIfListHasMutipleEmployeesHighestInMid() {
		//Arrange && Act
		Company google = new Company("google");
		Employee jacob = new Employee("jacob", "job title", 1990, 8.0, 4);
		Employee mad = new Employee("mad", "job title", 1991, 10.0, 4);
		Employee jax = new Employee("jax", "job title", 2001, 12.0, 4);
		Employee oli = new Employee("oli", "job title", 1993, 14.0, 4);
		Employee mac = new Employee("mac", "job title", 1994, 16.0, 4);
		google.addEmployee(jacob);
		google.addEmployee(mad);
		google.addEmployee(jax);
		google.addEmployee(oli);
		google.addEmployee(mac);
		//Assert
		int actual = google.getsMostRecentEmployeeYear();
		assertEquals(2001, actual);
	}
	
	@Test
	public void testIfListHasMutipleEmployeesHighestEnd() {
		//Arrange && Act
		Company google = new Company("google");
		Employee jacob = new Employee("jacob", "job title", 1990, 8.0, 4);
		Employee mad = new Employee("mad", "job title", 1991, 10.0, 4);
		Employee jax = new Employee("jax", "job title", 1992, 12.0, 4);
		Employee oli = new Employee("oli", "job title", 1993, 14.0, 4);
		Employee mac = new Employee("mac", "job title", 1997, 16.0, 4);
		google.addEmployee(jacob);
		google.addEmployee(mad);
		google.addEmployee(jax);
		google.addEmployee(oli);
		google.addEmployee(mac);
		//Assert
		int actual = google.getsMostRecentEmployeeYear();
		assertEquals(1997, actual);
	}
	
	@Test
	public void testIfListHasOneEmployees() {
		//Arrange && Act
		Company google = new Company("google");
		Employee jacob = new Employee("jacob", "job title", 1989, 8.0, 4);
		google.addEmployee(jacob);
		//Assert
		int actual = google.getsMostRecentEmployeeYear();
		assertEquals(1989, actual);
	}
	
	@Test 
	public void testIfNoEmployeeInList() {
		//Arrange && Act
		Company google = new Company("google");
		//Assert
		assertThrows(IllegalArgumentException.class,()->{
			google.getsMostRecentEmployeeYear();
		});
	}
}
